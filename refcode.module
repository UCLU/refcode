<?php
/**
 * @file
 * Main module file for the Refcode module.
 *
 * @todo make refcode field
 */

/*
 * Implements hook_field_info().
 *
 * Define the Refcode field.
 */
function refcode_field_info() {
  return array(
    'refcode' => array(
      'label' => t('Reference code'),
      'description' => t('Field for a unique reference code.'),
      'settings' => array('max_length' => 100, 'size' => 10),
      'instance_settings' => array('text_processing' => 0),
      'default_widget' => 'text_textfield',
      'default_formatter' => 'refcode_formatter',
    ),
  );
}

/*
 * Implements hook_field_widget_info_alter().
 *
 * Allow the Refcode field to use the text_textfield widget.
 */
function refcode_field_widget_info_alter(&$info) {
  $info['text_textfield']['field types'][] = 'refcode';
}

/*
 * Implements hook_field_field_is_empty().
 *
 * This function must be defined according to field.module.
 *
 * @return bool
 */
function refcode_field_is_empty($item, $field) {
  return empty($item['value']);
}

/*
 * Implements hook_field_validate().
 */
function refcode_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  $entity_ids = entity_extract_ids($entity_type, $entity);
  foreach ($items as $delta => $item) {
    if (!empty($item['value'])) {
      if (preg_match('/[^a-z0-9\-_]/i', $item['value'])) {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'refcode_exists',
          'message' => t('Reference codes may only contain letters, numbers, and - or _ characters.'),
        );
        continue;
      }
      $other_refcode = refcode_load_by_code($item['value']);
      if ($other_refcode && (
            $other_refcode->entity_type != $entity_type
            || $other_refcode->entity_id != $entity_ids[0]
          )) {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'refcode_exists',
          'message' => t('The code %code is already in use.', array('%code' => $item['value'])),
        );
      }
    }
  }
}

/**
 * Implements hook_field_insert().
 */
function refcode_field_insert($entity_type, $entity, $field, $instance, $langcode, &$items) {
  if (!variable_get('refcode_create_redirects', TRUE)) {
    return;
  }
  foreach ($items as $delta => $item) {
    if (!empty($item['value'])) {
      _refcode_create_redirect($item['value'], $entity_type, $entity, $langcode);
    }
  }
}

/**
 * Implements hook_field_update().
 */
function refcode_field_update($entity_type, $entity, $field, $instance, $langcode, &$items) {
  if (!variable_get('refcode_create_redirects', TRUE)) {
    return;
  }
  foreach ($items as $delta => $item) {
    if (!empty($item['value'])) {
      _refcode_create_redirect($item['value'], $entity_type, $entity, $langcode);
    }
  }
}

/**
 * Create a redirect for a refcode.
 *
 * Requires the Redirect module.
 *
 * @return bool
 *   TRUE or FALSE for success or failure.
 */
function _refcode_create_redirect($refcode, $entity_type, $entity, $langcode) {
  if (!module_exists('redirect')) {
    return FALSE;
  }
  // Prevent creating redirects for invalid source paths.
  if (strpos($refcode, '#') !== FALSE || $refcode == '<front>') {
    watchdog('refcode', 'Cannot create redirect for refcode @refcode (invalid path).', array(
      '@refcode' => $refcode,
    ), SEVERITY_WARNING);
    return FALSE;
  }
  // Get the redirect (target) URI.
  $redirect_uri = entity_uri($entity_type, $entity);
  $redirect_path = $redirect_uri['path'];
  // Don't create unnecessary redirects.
  if ($refcode == $redirect_path) {
    return TRUE;
  }
  // Prevent creating redirects that override existing paths.
  $menu_item = menu_get_item($refcode);
  if ($menu_item && $refcode == $menu_item['path']) {
    watchdog('refcode', 'Cannot create redirect for refcode @refcode (a menu item exists with the same path).', array(
      '@refcode' => $refcode,
    ), SEVERITY_WARNING);
    return FALSE;
  }
  $redirect = new stdClass();
  redirect_object_prepare($redirect);
  $redirect->source = $refcode;
  $redirect->redirect = $redirect_path;
  $redirect->language = $langcode;
  $hash = redirect_hash($redirect);
  if (!redirect_load_by_hash($hash)) {
    redirect_save($redirect);
    return TRUE;
  }
  return FALSE;
}

/**
 * Delete a redirect for a now removed refcode.
 */
function _refcode_delete_redirect($refcode, $entity_type, $entity, $langcode) {

}

/*
 * Implements hook_field_formatter_info().
 */
function refcode_field_formatter_info() {
  return array(
    'refcode_formatter' => array(
      'label' => t('Refcode'),
      'field types' => array('refcode'),
      'settings'  => array(),
    ),
  );
}

/*
 * Implements hook_field_formatter_view().
 */
function refcode_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  if ($display['type'] == 'refcode_formatter') {
    $entity_uri = entity_uri($entity_type, $entity);
    $current_path = current_path();
    foreach ($items as $delta => $item) {
      if ($current_path != $entity_uri['path']) {
        $element[$delta] = array(
          '#theme' => 'link',
          '#path' => $entity_uri['path'],
          '#options' => $entity_uri['options'],
          '#text' => $item['value'],
        );
      }
      else {
        $element[$delta] = array('#markup' => check_plain($item['value']));
      }
    }
  }
  return $element;
}

/**
 * Implements hook_theme().
 */
function refcode_theme() {
  return array(
    'refcode_link' => array(
      'variables' => array(
        'refcode' => NULL,
        'link' => FALSE,
        'path' => NULL,
        'link options' => array(),
        'label' => NULL,
        'broken' => FALSE,
        'append code' => TRUE,
        'attributes' => array(),
      ),
      'file' => 'refcode.theme.inc',
    ),
  );
}

/**
 * Implements hook_filter_info().
 */
function refcode_filter_info() {
  $filters['refcode_link'] = array(
    'title' => t('Refcode to Link filter'),
    'description' => t('Converts reference codes in the form [REFCODE] into links.'),
    'process callback' => '_refcode_link_filter',
    'tips callback' => '_refcode_link_filter_tips',
  );
  return $filters;
}

/**
 * Filter tips callback for the Refcode to Link filter.
 */
function _refcode_link_filter_tips($delta, $format, $long = FALSE) {
  return t('Reference codes e.g. [REFCODE] turn into links automatically. Use [REFCODE:label] to supply a custom link label. Use [REFCODE!] to suppress labels.');
}

/**
 * Filter process callback for the Refcode to Link filter.
 */
function _refcode_link_filter($text, $filter, $format) {
  $search_pattern = '/(?:(?<!\w)\[([^\]]+)\](?!\w))|<pre>.*?<\/pre>|<code>.*?<\/code>|<a(?:[^>"\']|"[^"]*"|\'[^\']*\')*>.*?<\/a>/';
  $text = preg_replace_callback($search_pattern, '_refcode_link_callback', $text);
  return $text;
}

/**
 * Load a refcode object.
 *
 * @param string $refcode  The reference code.
 *
 * @return stdClass
 *   Returns an object containing the properties entity_type, entity_id, etc.
 */
function refcode_load_by_code($refcode) {
  $query = new EntityFieldQuery();
  $query->fieldCondition('field_refcode', 'value', $refcode, '=');
  $result = $query->execute();
  if (!$result) {
    return FALSE;
  }
  foreach ($result as $entity_type => $entities) {
    foreach ($entities as $entity_id => $entity) {
      $entity->entity_type = $entity_type;
      $entity->entity_id = $entity_id;
      return $entity;
      break;
    }
  }
}

/**
 * Callback function used by preg_replace_callback().
 *
 * @see _refcode_link_filter()
 */
function _refcode_link_callback($matches) {
  if (!isset($matches[1])) {
    return $matches[0];
  }

  // Get the reference code.
  $code = $matches[1];

  // Build an array of options to pass to theme('refcode_link', $options).
  $options = array();

  // Get the label.
  $label = FALSE;
  $colon_pos = strpos($code, ':');
  if ($colon_pos) {
    $options['label'] = substr($code, $colon_pos + 1);
    $code = substr($code, 0, $colon_pos);
  }

  // Find out if the link shouldn't be labelled at all.
  $length = strlen($code);
  $suppress_label = FALSE;
  if (substr($code, $length - 1) == '!') {
    $suppress_label = TRUE;
    $code = substr($code, 0, $length - 1);
  }

  // Get the refcode information.
  $refcode = refcode_load_by_code($code);
  if (!$refcode) {
    return $matches[0];
  }

  // Load the target entity.
  $entity = FALSE;
  $entities = entity_load($refcode->entity_type, array($refcode->entity_id));
  if ($entities) {
    $entity = reset($entities);
  }

  $options['refcode'] = $code;

  if (!$entity) {
    $options['broken'] = TRUE;
  }
  elseif (entity_access('view', $refcode->entity_type, $entity)) {
    // If no $label is set, and $suppress_label isn't set, the entity label will
    // be used (e.g. the node title).
    if (empty($options['label']) && !$suppress_label) {
      $options['label'] = entity_label($refcode->entity_type, $entity);
    }
    $options['link'] = TRUE;
    $uri = entity_uri($refcode->entity_type, $entity);
    $options['path'] = $uri['path'];
    if (isset($uri['options'])) {
      $options['link options'] = $uri['options'];
    }
  }

  return theme('refcode_link', $options);
}
