<?php
/**
 * @file
 * Main module file for the Refcode module.
 *
 * @todo make refcode field
 */

/*
 * Implements hook_field_info().
 *
 * Define the Refcode field.
 */
function refcode_field_info() {
  return array(
    'refcode' => array(
      'label' => t('Reference code'),
      'description' => t('Field for a unique reference code.'),
      'settings' => array('max_length' => 100, 'size' => 10),
      'instance_settings' => array('text_processing' => 0),
      'default_widget' => 'text_textfield',
      'default_formatter' => 'refcode_formatter',
    ),
  );
}

/*
 * Implements hook_field_widget_info_alter().
 *
 * Allow the Refcode field to use the text_textfield widget.
 */
function refcode_field_widget_info_alter(&$info) {
  $info['text_textfield']['field types'][] = 'refcode';
}

/*
 * Implements hook_field_field_is_empty().
 *
 * This function must be defined according to field.module.
 *
 * @return bool
 */
function refcode_field_is_empty($item, $field) {
  return empty($item['value']);
}

/*
 * Implements hook_field_validate().
 */
function refcode_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  $entity_ids = entity_extract_ids($entity_type, $entity);
  foreach ($items as $delta => $item) {
    if (!empty($item['value'])) {
      $other_refcode = refcode_load_by_code($item['value']);
      if ($other_refcode && (
            $other_refcode->entity_type != $entity_type
            || $other_refcode->entity_id != $entity_ids[0]
          )) {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'refcode_exists',
          'message' => t('The code %code is already in use.', array('%code' => $item['value'])),
        );
      }
    }
  }
}

/*
 * Implements hook_field_formatter_info().
 */
function refcode_field_formatter_info() {
  return array(
    'refcode_formatter' => array(
      'label' => t('Refcode'),
      'field types' => array('refcode'),
      'settings'  => array(),
    ),
  );
}

/*
 * Implements hook_field_formatter_view().
 */
function refcode_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  if ($display['type'] == 'refcode_formatter') {
    foreach ($items as $delta => $item) {
      $element[$delta] = array(
        '#markup' => check_plain($item['value']),
      );
    }
  }
  return $element;
}

/**
 * Implements hook_theme().
 */
function refcode_theme() {
  return array(
    'refcode_link' => array(
      'variables' => array(
        'refcode' => NULL,
        'link' => FALSE,
        'path' => NULL,
        'link options' => array(),
        'label' => NULL,
        'append code' => TRUE,
        'broken' => FALSE,
        'attributes' => array(),
      ),
      'file' => 'refcode.theme.inc',
    ),
  );
}

/**
 * Implements hook_filter_info().
 */
function refcode_filter_info() {
  $filters['refcode_link'] = array(
    'title' => t('Refcode to Link filter'),
    'description' => t('Converts reference codes in the form [REFCODE] into links.'),
    'process callback' => '_refcode_link_filter',
    'tips callback' => '_refcode_link_filter_tips',
  );
  return $filters;
}

/**
 * Filter tips callback for the Refcode to Link filter.
 */
function _refcode_link_filter_tips($delta, $format, $long = FALSE) {
  return t('Reference codes e.g. [REFCODE] turn into links automatically.');
}

/**
 * Filter process callback for the Refcode to Link filter.
 */
function _refcode_link_filter($text, $filter, $format) {
  $search_pattern = '/(?:(?<!\w)\[([^\]]+)\](?!\w))|<pre>.*?<\/pre>|<code>.*?<\/code>|<a(?:[^>"\']|"[^"]*"|\'[^\']*\')*>.*?<\/a>/';
  $text = preg_replace_callback($search_pattern, '_refcode_link_callback', $text);
  return $text;
}

/**
 * Load a refcode object.
 *
 * @param string $refcode  The reference code.
 *
 * @return stdClass
 *   Returns an object containing the properties entity_type, entity_id, etc.
 */
function refcode_load_by_code($refcode) {
  $query = new EntityFieldQuery();
  $query->fieldCondition('field_refcode', 'value', $refcode, '=');
  $result = $query->execute();
  if (!$result) {
    return FALSE;
  }
  foreach ($result as $entity_type => $entities) {
    foreach ($entities as $entity_id => $entity) {
      $entity->entity_type = $entity_type;
      $entity->entity_id = $entity_id;
      return $entity;
      break;
    }
  }
}

/**
 * Callback function used by preg_replace_callback().
 *
 * @see _refcode_link_filter()
 */
function _refcode_link_callback($matches) {
  if (!isset($matches[1])) {
    return $matches[0];
  }
  $code = $matches[1];
  $colon_pos = strpos($code, ':');
  if ($colon_pos) {
    $label = substr($code, 0, $colon_pos);
    $code = substr($code, $colon_pos + 1);
  }
  $options = array(
    'refcode' => $code,
  );
  $refcode = refcode_load_by_code($code);
  if (!$refcode) {
    return $matches[0];
  }
  $entity = $refcode;
  if (entity_access('view', $refcode->entity_type, $entity)) {
    $options['label'] = entity_label($refcode->entity_type, $entity);
    $uri = entity_uri($refcode->entity_type, $entity);
    $options += array(
      'link' => TRUE,
      'path' => $uri['path'],
    );
  }
  if (isset($label)) {
    $options['label'] = $label;
  }
  return theme('refcode_link', $options);
}
